## for (var table : root.tables) {
## if (table.isRestService) {
## if (table.tableType.value() == 'table' || table.tableType.value() == 'view' || table.tableType.value() == 'base-table') {
##   var classname = java.toJavaName(table);
##   var filename = outdir + "/rs/server/test/Test" + classname + "RestServer.java";
// =============================================================================
// WARNING: THIS FILE IS AUTO_GENERATED - DO NOT EDIT.
// =============================================================================
## import(etc/banners/banner.txt);
// =============================================================================
// WARNING: THIS FILE IS AUTO_GENERATED - DO NOT EDIT.
// =============================================================================

package #{database.packageName}.rs.server.test;

import java.util.List;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.viper.database.dao.DatabaseInterface;
import com.viper.database.dao.DatabaseFactory;
import com.viper.database.dao.DatabaseUtil;
import com.viper.database.dao.converters.Converters;

import #{database.packageName}.#{classname};
import #{database.packageName}.rs.#{classname}Service;
import com.viper.database.utils.junit.AbstractTestCase;
import com.viper.database.utils.RandomBean;
import com.viper.database.rest.model.*; 

public class Test#{classname}RestServer extends AbstractTestCase {

    private static DatabaseInterface database = null;

    @BeforeClass
    public static void initializeClass() throws Exception {

		String DatabaseInstanceName = com.viper.database.utils.ResourceUtil.getResource("DATABASE_LOCATOR", "test"); 
        database = DatabaseFactory.getInstance(DatabaseInstanceName);
    }

    @Test
    public void testQueryOne() throws Exception {

        #{classname} expected = RandomBean.getRandomBean(#{classname}.class, 5);
        #{classname} result = database.insert(expected);
        assertNotNull(getCallerMethodName() + ", result= ", result);
        
        String name = DatabaseUtil.getPrimaryKeyName(#{classname}.class);
        Object value = DatabaseUtil.getPrimaryKeyValue(result); 
        
        Response response = new #{classname}Service().query(name, value.toString());

        assertNotNull(getCallerMethodName() + ", response ", response);
    }

    @Test
    public void testQueryList() throws Exception {
    
        #{classname} expected = RandomBean.getRandomBean(#{classname}.class, 5);
        #{classname} result = database.insert(expected);
        assertNotNull(getCallerMethodName() + ", result= ", result);
        
        String name = DatabaseUtil.getPrimaryKeyName(#{classname}.class);
        Object value = DatabaseUtil.getPrimaryKeyValue(result);
 
        Response response = new #{classname}Service().queryList(name, value.toString());
 
        assertNotNull(getCallerMethodName() + ", failed:", response);
    }
    
    @Test
    public void testQueryPage() throws Exception {
 
        Response response = new #{classname}Service().queryList( DatabaseInterface.PAGENO_KEY, "0" /*, "size", 4 */);
 
        assertNotNull(getCallerMethodName() + ", failed:", response);
    }
     
    @Test
    public void testQueryAll() throws Exception {

        List<#{classname}> expected = RandomBean.getRandomBeans(#{classname}.class, 5, 100);
        database.insertAll(expected);  
        
        Response response = new #{classname}Service().queryAll(  );

        assertNotNull(getCallerMethodName() + ", response ", response);
    }

    @Test
    public void testUpdate() throws Exception {

        #{classname} bean = RandomBean.getRandomBean(#{classname}.class, 5);
 
        
        Response response = new #{classname}Service().update(Converters.convert (String.class, bean));
 
        assertNotNull(getCallerMethodName() + ", failed:", response);
    }

    @Test
    public void testCreate() throws Exception {

        #{classname} bean = RandomBean.getRandomBean(#{classname}.class, 5);
 
        
        Response response = new #{classname}Service().createItem(Converters.convert (String.class, bean));
 
        assertNotNull(getCallerMethodName() + ", failed:", response);
    }

    @Test
    public void testDelete() throws Exception {
         
        
        #{classname} bean = RandomBean.getRandomBean(#{classname}.class, 5);
        
        Response response1 = new #{classname}Service().createItem(Converters.convert (String.class, bean));
        
        assertNotNull(getCallerMethodName() + ", failed:", response1);

        Response response = new #{classname}Service().deleteItem(Converters.convert (String.class, bean));
 
        assertNotNull(getCallerMethodName() + ", failed:", response);
    }
}
## util.write(filename, writer);
## }
## }
## }