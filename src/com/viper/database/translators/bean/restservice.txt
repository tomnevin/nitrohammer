## for (var table : root.tables) {
## if (table.isRestService) {
## if (table.tableType.value() == 'table' || table.tableType.value() == 'view' || table.tableType.value() == 'base-table') {
##   var classname = java.toJavaName(table);
##   var filename = outdir + "/rs/" + classname + "Service.java";
// =============================================================================
// WARNING: THIS FILE IS AUTO_GENERATED - DO NOT EDIT.
// =============================================================================
## import(etc/banners/banner.txt);
// =============================================================================
// WARNING: THIS FILE IS AUTO_GENERATED - DO NOT EDIT.
// =============================================================================

package #{database.packageName}.rs;

import java.util.List;
import java.util.logging.Logger;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.Response;

import javax.servlet.http.HttpServletRequest;

import com.viper.database.dao.DatabaseInterface;
import com.viper.database.dao.DatabaseFactory;

import com.viper.rest.AgTablesUtil;
import com.viper.rest.LocaleUtil;

import #{database.packageName}.#{classname};

@Path("classes/#{classname.toLowerCase()}")
public class #{classname}Service {

    private static final Logger log = Logger.getLogger(#{classname}Service.class.getName());
    
    @Context 
    private HttpServletRequest httpServletRequest;
    
    public String getDatabaseName() throws Exception {
    	return com.viper.database.utils.ResourceUtil.getResource("DATABASE_LOCATOR", "test");
    }
    
    @GET
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public #{classname} query(@QueryParam("where") List<String> whereClause) throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
        
        #{classname} bean = database.query(#{classname}.class, (Object[])whereClause.toArray());
        
        return bean;
    }
     
    @GET
    @Path("{key}/{value}")
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public #{classname} query(@PathParam("key") String key, @PathParam("value") String value) throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
        
        #{classname} bean = database.query(#{classname}.class, key, value);
        
        return bean;
    }
       
    @GET
    @Path("all")
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public  List<#{classname}> query() throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
        
        List<#{classname}> beans = database.queryAll(#{classname}.class);
      
        return beans;
    }
       
    @GET
    @Path("list/{key}/{value}")
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public List<#{classname}> queryList(@PathParam("key") String key, @PathParam("value") String value) throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
        
        List<#{classname}> beans = database.queryList(#{classname}.class, key, value);
        
        return beans;
    }

    @PUT
    @Consumes({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public #{classname} update(#{classname} bean) throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
       
        database.insert(bean);
        
        return bean;
    }

    @POST
    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public #{classname} createItem(#{classname} bean) throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
        
        database.insert(bean);
        
        return bean;
    }
    
    @POST
    @Path("list")
    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public List<#{classname}> createItems(List<#{classname}> beans) throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
        
        database.insertAll(beans);
        
        return beans;
    }

    @DELETE
    @Path("{key}/{value}")
    public String deleteItem(@PathParam("key") String key, @PathParam("value") String value) throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
        
        database.delete(#{classname}.class, key, value);

        return "ok";
    }
    
    @DELETE
    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public String deleteItem(#{classname} bean) throws Exception {

		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName); 
        
        database.delete(bean);

        return "ok";
    }
              
    @GET
    @Path("js/data")
    @Produces({  MediaType.APPLICATION_JSON})
    public Response dataGetResponse(@Context UriInfo uriInfo) throws Exception {

     	MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();
     	 
		String DatabaseInstanceName = getDatabaseName();
	    String json = AgTablesUtil.data(LocaleUtil.getCurrentLocale(httpServletRequest), DatabaseInstanceName, #{classname}.class, queryParams);   
     	return Response.ok(json, MediaType.APPLICATION_JSON).build();
    }
          
    @POST
    @Path("js/data")
    @Produces({  MediaType.APPLICATION_JSON })
    public Response dataPostResponse( @Context UriInfo uriInfo) throws Exception {

     	MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();
     	 
		String DatabaseInstanceName = getDatabaseName();
	    String json = AgTablesUtil.data(LocaleUtil.getCurrentLocale(httpServletRequest), DatabaseInstanceName, #{classname}.class, queryParams);   
    	return Response.ok(json, MediaType.APPLICATION_JSON).build();
     }
             
    @GET
    @Path("js/header")
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public String dataTableResponse() throws Exception {

		String DatabaseInstanceName = getDatabaseName();
	    return AgTablesUtil.header(LocaleUtil.getCurrentLocale(httpServletRequest), DatabaseInstanceName, #{classname}.class);   
    }
              
    @GET
    @Path("js/table")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces({  MediaType.APPLICATION_JSON })
    public String tableResponse( @Context UriInfo uriInfo) throws Exception {
    	MultivaluedMap<String, String> formParams = uriInfo.getQueryParameters();
    	
		String DatabaseInstanceName = getDatabaseName();
	    return AgTablesUtil.table(LocaleUtil.getCurrentLocale(httpServletRequest), DatabaseInstanceName, #{classname}.class, formParams);   
    }
           
    @GET
    @Path("js/form")
    @Produces({MediaType.APPLICATION_JSON })
    public Response dataResponses(@QueryParam("key") String key, @QueryParam("value") String value) throws Exception {
    
		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName);
        
       	List beans = AgTablesUtil.getBeansByForeignKeys(database, "#{classname}", #{classname}.class, key, value);
       	
    	String json = AgTablesUtil.form(LocaleUtil.getCurrentLocale(httpServletRequest), "#{classname}", beans);
    	
	    return Response.ok(json, MediaType.APPLICATION_JSON).build();
    }
             
    @GET
    @Path("js/form/list")
    @Produces({MediaType.APPLICATION_JSON })
    public Response dataResponses() throws Exception {
    
		String DatabaseInstanceName = getDatabaseName();
        DatabaseInterface database = DatabaseFactory.getInstance(DatabaseInstanceName);
        
        List<#{classname}> beans = database.queryAll(#{classname}.class);
       	
    	String json = AgTablesUtil.form(LocaleUtil.getCurrentLocale(httpServletRequest), "#{classname}", beans);
    	
	    return Response.ok(json, MediaType.APPLICATION_JSON).build();
    }
}

## util.write(filename, writer);
## }
## }
## }