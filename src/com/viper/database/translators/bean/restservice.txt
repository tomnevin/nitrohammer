## for (var table : root.tables) {
## if (table.isRestService) { 
##   var classname = java.toJavaName(table);
##   var filename = outdir + "/rs/" + classname + "Service.java";
// =============================================================================
// WARNING: THIS FILE IS AUTO_GENERATED - DO NOT EDIT.
// =============================================================================
## import(etc/banners/banner.txt);
// =============================================================================
// WARNING: THIS FILE IS AUTO_GENERATED - DO NOT EDIT.
// =============================================================================

package #{database.packageName}.rs;

import java.util.List; 
import java.util.Locale; 

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.Response;

import javax.servlet.http.HttpServletRequest;

import com.viper.rest.LocaleUtil; 
import com.viper.rest.service.RestServiceFactory; 

import #{database.packageName}.#{classname};

@Path("classes/#{classname.toLowerCase()}")
public class #{classname}Service { 
    
    @Context 
    private HttpServletRequest httpServletRequest;
     
    @GET
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public Response query(@QueryParam("where") List<String> whereClause) throws Exception {

	    Locale locale = LocaleUtil.getCurrentLocale(httpServletRequest);
	     
		return RestServiceFactory.find(httpServletRequest).query(#{classname}.class, locale, whereClause);
    }
     
    @GET
    @Path("{key}/{value}")
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public Response query(@PathParam("key") String key, @PathParam("value") String value) throws Exception {

	    Locale locale = LocaleUtil.getCurrentLocale(httpServletRequest);
	     
		return RestServiceFactory.find(httpServletRequest).query(#{classname}.class, locale, key, value);
    }

    @GET
    @Path("list/{key}/{value}")
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public Response queryList(@PathParam("key") String key, @PathParam("value") String value) throws Exception {
 
	    Locale locale = LocaleUtil.getCurrentLocale(httpServletRequest);
	     
		return RestServiceFactory.find(httpServletRequest).queryList(#{classname}.class, locale, key, value );
    }
                  
    @GET
    @Path("map")
    @Produces({  MediaType.APPLICATION_JSON})
    public Response queryMap(@Context UriInfo uriInfo) throws Exception {

     	MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();
     	  
	    Locale locale = LocaleUtil.getCurrentLocale(httpServletRequest);
	     
	    return RestServiceFactory.find(httpServletRequest).queryList(#{classname}.class, locale, queryParams);
    }  
         
    @GET
    @Path("all")
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public Response queryAll() throws Exception {
 
	    Locale locale = LocaleUtil.getCurrentLocale(httpServletRequest); 
	     
		return RestServiceFactory.find(httpServletRequest).queryAll(#{classname}.class, locale );
    }

    @PUT
    @Consumes({ MediaType.TEXT_PLAIN })
    @Produces({  MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public Response update(String request) throws Exception {
         
		return RestServiceFactory.find(httpServletRequest).update(#{classname}.class, request);
    }

    @POST
    @Consumes({ MediaType.TEXT_PLAIN })
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public Response createItem(String request) throws Exception {
         
		return RestServiceFactory.find(httpServletRequest).createItem(#{classname}.class, request);
    }
    
    @POST
    @Path("list")
    @Consumes({ MediaType.TEXT_PLAIN })
    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
    public Response createItems(String request) throws Exception {
         
		return RestServiceFactory.find(httpServletRequest).createItems(#{classname}.class, request);
    }

    @DELETE
    @Path("{key}/{value}") 
    public Response deleteItem(@PathParam("key") String key, @PathParam("value") String value) throws Exception {
  
		return RestServiceFactory.find(httpServletRequest).deleteItem(#{classname}.class, key, value);
    }
     
    public final void setHttpServletRequest(HttpServletRequest httpServletRequest) {
        this.httpServletRequest = httpServletRequest;
    }
}

## util.write(filename, writer);
## } 
## }